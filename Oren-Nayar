precision highp float; //set default precision in glsl es 2.0

struct lightInfo
{
    vec3 diffuseColor;
    vec3 direction;
};

uniform lightInfo light;

varying vec3 varNormal;
varying vec3 varEyeDir;

void main()
{
    // set value depending on material; let the user set this from the outside instead...
    float roughness = 0.5;
    
    const float PI = 3.14159;

    // interpolating normals will change the length of the normal, so renormalize the normal.
    vec3 normal = normalize(varNormal);
    vec3 eyeDir = normalize(varEyeDir);
    
    // calculate intermediary values
    float NdotL = dot(normal, light.direction);
    float NdotV = dot(normal, eyeDir); 

    float angleVN = acos(NdotV);
    float angleLN = acos(NdotL);
    
    float alpha = max(angleVN, angleLN);
    float beta = min(angleVN, angleLN);
    float gamma = dot(eyeDir - normal * dot(eyeDir, normal), light.direction - normal * dot(light.direction, normal));
    
    float roughnessSquared = roughness * roughness;
    float roughnessSquared9 = (roughnessSquared / (roughnessSquared + 0.09));
    
    // calculate C1, C2 and C3
    float C1 = 1.0 - 0.5 * (roughnessSquared / (roughnessSquared + 0.33));
    float C2 = 0.45 * roughnessSquared9;
    
    if(gamma >= 0.0)
    {
        C2 *= sin(alpha);
    }
    else
    {
        C2 *= (sin(alpha) - pow((2.0 * beta) / PI, 3.0));
    }
 
    float powValue = (4.0 * alpha * beta) / (PI * PI);
    float C3  = 0.125 * roughnessSquared9 * powValue * powValue;
 
    // now calculate both main parts of the formula
    float A = gamma * C2 * tan(beta);
    float B = (1.0 - abs(gamma)) * C3 * tan((alpha + beta) / 2.0);
 
    // put it all together
    float L1 = max(0.0, NdotL) * (C1 + A + B);
    
    // also calculate interreflection
    float twoBetaPi = 2.0 * beta / PI;
	//TODO: p is squared in this case... how to separate this?
    float L2 = 0.17 * max(0.0, NdotL) * (roughnessSquared / (roughnessSquared + 0.13)) * (1.0 - gamma * twoBetaPi * twoBetaPi);
    
    // get the final color by summing both components
    vec3 finalValue = light.diffuseColor * (L1 + L2);
    gl_FragColor = vec4(finalValue, 1.0);
}
