Shader Inputs
uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform samplerXX iChannel0..3;          // input channel. XX = 2D/Cube
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)

-
1
// Created by inigo quilez - iq/2013
2
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
3
​
4
// Volumetric clouds. It performs level of detail (LOD) for faster rendering
5
​
6
float noise( in vec3 x )
7
{
8
    vec3 p = floor(x);
9
    vec3 f = fract(x);
10
    f = f*f*(3.0-2.0*f);
11
    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;
12
    vec2 rg = texture2D( iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;
13
    return -1.0+2.0*mix( rg.x, rg.y, f.z );
14
}
15
​
16
float map5( in vec3 p )
17
{
18
    vec3 q = p - vec3(0.0,0.1,1.0)*iGlobalTime;
19
    float f;
20
    f  = 0.50000*noise( q ); q = q*2.02;
21
    f += 0.25000*noise( q ); q = q*2.03;
22
    f += 0.12500*noise( q ); q = q*2.01;
23
    f += 0.06250*noise( q ); q = q*2.02;
24
    f += 0.03125*noise( q );
25
    return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
26
}
27
​
28
float map4( in vec3 p )
29
{
30
    vec3 q = p - vec3(0.0,0.1,1.0)*iGlobalTime;
31
    float f;
32
    f  = 0.50000*noise( q ); q = q*2.02;
33
    f += 0.25000*noise( q ); q = q*2.03;
34
    f += 0.12500*noise( q ); q = q*2.01;
35
    f += 0.06250*noise( q );
36
    return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
37
}
38
float map3( in vec3 p )
39
{
40
    vec3 q = p - vec3(0.0,0.1,1.0)*iGlobalTime;
41
    float f;
42
    f  = 0.50000*noise( q ); q = q*2.02;
43
    f += 0.25000*noise( q ); q = q*2.03;
44
    f += 0.12500*noise( q );
45
    return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
46
}
47
float map2( in vec3 p )
48
{
49
    vec3 q = p - vec3(0.0,0.1,1.0)*iGlobalTime;
50
    float f;
51
    f  = 0.50000*noise( q ); q = q*2.02;
52
    f += 0.25000*noise( q );;
53
    return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
54
}
55
​
56
vec3 sundir = normalize( vec3(-1.0,0.0,-1.0) );
57
​
58
vec4 integrate( in vec4 sum, in float dif, in float den, in vec3 bgcol, in float t )
59
{
60
    // lighting
61
    vec3 lin = vec3(0.65,0.7,0.75)*1.4 + vec3(1.0, 0.6, 0.3)*dif;        
62
    vec4 col = vec4( mix( vec3(1.0,0.95,0.8), vec3(0.25,0.3,0.35), den ), den );
63
    col.xyz *= lin;
64
    col.xyz = mix( col.xyz, bgcol, 1.0-exp(-0.003*t*t) );
65
    // front to back blending    
66
    col.a *= 0.4;
67
    col.rgb *= col.a;
68
    return sum + col*(1.0-sum.a);
69
}
70
​
71
#define MARCH(STEPS,MAPLOD) for(int i=0; i<STEPS; i++) { vec3  pos = ro + t*rd; if( pos.y<-3.0 || pos.y>2.0 || sum.a > 0.99 ) break; float den = MAPLOD( pos ); if( den>0.01 ) { float dif =  clamp((den - MAPLOD(pos+0.3*sundir))/0.6, 0.0, 1.0 ); sum = integrate( sum, dif, den, bgcol, t ); } t += max(0.05,0.02*t); }
72
​
73
vec4 raymarch( in vec3 ro, in vec3 rd, in vec3 bgcol )
74
{
2749 chars
