// RENDERING A SKYBOX USING A CUBE MAP WITH OPENGL AND GLSL
// http://www.keithlantz.net/2011/10/rendering-a-skybox-using-a-cube-map-with-opengl-and-glsl/



void setupCubeMap(GLuint& texture) {
    glActiveTexture(GL_TEXTURE0);
    glEnable(GL_TEXTURE_CUBE_MAP);
    glGenTextures(1, &texture);
    glBindTexture(GL_TEXTURE_CUBE_MAP, texture);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_NEAREST); 
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
}
 
void setupCubeMap(GLuint& texture, SDL_Surface *xpos, SDL_Surface *xneg, SDL_Surface *ypos, SDL_Surface *yneg, SDL_Surface *zpos, SDL_Surface *zneg) {
    setupCubeMap(texture);
    glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, xpos->w, xpos->h, 0, xpos->format->BytesPerPixel == 4 ? GL_RGBA : GL_RGB, GL_UNSIGNED_BYTE, xpos->pixels);
    glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X, 0, GL_RGBA, xneg->w, xneg->h, 0, xneg->format->BytesPerPixel == 4 ? GL_RGBA : GL_RGB, GL_UNSIGNED_BYTE, xneg->pixels);
    glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y, 0, GL_RGBA, ypos->w, ypos->h, 0, ypos->format->BytesPerPixel == 4 ? GL_RGBA : GL_RGB, GL_UNSIGNED_BYTE, ypos->pixels);
    glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, GL_RGBA, yneg->w, yneg->h, 0, yneg->format->BytesPerPixel == 4 ? GL_RGBA : GL_RGB, GL_UNSIGNED_BYTE, yneg->pixels);
    glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z, 0, GL_RGBA, zpos->w, zpos->h, 0, zpos->format->BytesPerPixel == 4 ? GL_RGBA : GL_RGB, GL_UNSIGNED_BYTE, zpos->pixels);
    glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, GL_RGBA, zneg->w, zneg->h, 0, zneg->format->BytesPerPixel == 4 ? GL_RGBA : GL_RGB, GL_UNSIGNED_BYTE, zneg->pixels);
}
 
void deleteCubeMap(GLuint& texture) {
    glDeleteTextures(1, &texture);
}
We can use these functions like below.


SDL_Surface *xpos = IMG_Load("media/xpos.png"); SDL_Surface *xneg = IMG_Load("media/xneg.png");
SDL_Surface *ypos = IMG_Load("media/ypos.png"); SDL_Surface *yneg = IMG_Load("media/yneg.png");
SDL_Surface *zpos = IMG_Load("media/zpos.png"); SDL_Surface *zneg = IMG_Load("media/zneg.png");
GLuint cubemap_texture;
setupCubeMap(cubemap_texture, xpos, xneg, ypos, yneg, zpos, zneg);
SDL_FreeSurface(xneg);  SDL_FreeSurface(xpos);
SDL_FreeSurface(yneg);  SDL_FreeSurface(ypos);
SDL_FreeSurface(zneg);  SDL_FreeSurface(zpos);
 
// rendering
 
deleteCubeMap(cubemap_texture);
As mentioned, using a cube map texture will allow our vertices to double as texture coordinates. Our vertex shader will generate texture coordinates from the vertex and pass those coordinates on to our fragment shader. Below, our vertex shader evaluates the position by multiplying the incoming vertex by our model view projection matrix and outputs our texture coordinate based on the vertex. In our program we will grab a handle to the vertex and PVM variables to set their values before drawing our elements.

1
2
3
4
5
6
7
8
9
10
#version 330
 
in vec3 vertex;
out vec3 texCoord;
uniform mat4 PVM;
 
void main() {
    gl_Position = PVM * vec4(vertex, 1.0);
    texCoord = vertex;
}
The fragment shader below accepts the incoming texture coordinate and uses the cube map to output the fragment color based on the texture coordinate.

1
2
3
4
5
6
7
8
9
#version 330
 
in vec3 texCoord;
out vec4 fragColor;
uniform samplerCube cubemap;
 
void main (void) {
    fragColor = texture(cubemap, texCoord);
}
In our program we need to do the following to set up our shader program (don't forget to initialize your extension wrangler once you have created an OpenGL context ):

Create a vertex and fragment shader. glCreateShader
Specify the source for each shader. glShaderSource
Compile the shaders. glCompileShader
Create an OpenGL program object. glCreateProgram
Attach the shaders to the program object. glAttachShader
Link the program object. glLinkProgram
Use the program. glUseProgram
We also need to grab the location of any attributes and uniforms. glGetAttribLocation and glGetUniformLocation
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
// initialize the extension wrangler
glewInit();
 
// load our shaders and compile them.. create a program and link it
GLuint glShaderV = glCreateShader(GL_VERTEX_SHADER);
GLuint glShaderF = glCreateShader(GL_FRAGMENT_SHADER);
const GLchar* vShaderSource = loadFile("src/vertex.sh");
const GLchar* fShaderSource = loadFile("src/fragment.sh");
glShaderSource(glShaderV, 1, &vShaderSource, NULL);
glShaderSource(glShaderF, 1, &fShaderSource, NULL);
delete [] vShaderSource;
delete [] fShaderSource;
glCompileShader(glShaderV);
glCompileShader(glShaderF);
GLuint glProgram = glCreateProgram();
glAttachShader(glProgram, glShaderV);
glAttachShader(glProgram, glShaderF);
glLinkProgram(glProgram);
glUseProgram(glProgram);
 
// shader logs
int  vlength,    flength;
char vlog[2048], flog[2048];
glGetShaderInfoLog(glShaderV, 2048, &vlength, vlog);
glGetShaderInfoLog(glShaderF, 2048, &flength, flog);
std::cout << vlog << std::endl << std::endl << flog << std::endl << std::endl;
 
// grab the pvm matrix and vertex location from our shader program
GLint PVM    = glGetUniformLocation(glProgram, "PVM");
GLint vertex = glGetAttribLocation(glProgram, "vertex");
At this point we have set up a cube map texture and a shader program, but we still need to specify the vertices for the skybox. We will implement a Vertex Buffer Object to store both the vertices and the indices. Below we generate a buffer, bind it, and specify the data for each. We have eight vertices for the skybox. The skybox will be rendered with quadrilaterals, so we have six faces, each with four indices.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
// cube vertices for vertex buffer object
GLfloat cube_vertices[] = {
  -1.0,  1.0,  1.0,
  -1.0, -1.0,  1.0,
   1.0, -1.0,  1.0,
   1.0,  1.0,  1.0,
  -1.0,  1.0, -1.0,
  -1.0, -1.0, -1.0,
   1.0, -1.0, -1.0,
   1.0,  1.0, -1.0,
};
GLuint vbo_cube_vertices;
glGenBuffers(1, &vbo_cube_vertices);
glBindBuffer(GL_ARRAY_BUFFER, vbo_cube_vertices);
glBufferData(GL_ARRAY_BUFFER, sizeof(cube_vertices), cube_vertices, GL_STATIC_DRAW);
//glBindBuffer(GL_ARRAY_BUFFER, 0);
 
// cube indices for index buffer object
GLushort cube_indices[] = {
  0, 1, 2, 3,
  3, 2, 6, 7,
  7, 6, 5, 4,
  4, 5, 1, 0,
  0, 3, 7, 4,
  1, 2, 6, 5,
};
GLuint ibo_cube_indices;
glGenBuffers(1, &ibo_cube_indices);
glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo_cube_indices);
glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(cube_indices), cube_indices, GL_STATIC_DRAW);
//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
We also need to enable our vertex attribute and specify its format.

1
2
glEnableVertexAttribArray(vertex);
glVertexAttribPointer(vertex, 3, GL_FLOAT, GL_FALSE, 0, 0);
We are almost there, but we need to specify our model view projection matrix. For now we will do something like below. In our loop we will have another matrix to handle rotations based on user input.

1
2
3
glm::mat4 Projection = glm::perspective(45.0f, (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f); 
glm::mat4 View       = glm::mat4(1.0f);
glm::mat4 Model      = glm::scale(glm::mat4(1.0f),glm::vec3(50,50,50));
In our loop we update the alpha and beta rotations based on user input and update our transformation matrix.

1
2
3
4
5
6
7
8
9
10
11
12
if (kb.getKeyState(KEY_UP))    alpha += 180.0f*elapsed0;
if (kb.getKeyState(KEY_DOWN))  alpha -= 180.0f*elapsed0;
if (kb.getKeyState(KEY_LEFT))  beta  -= 180.0f*elapsed0;
if (kb.getKeyState(KEY_RIGHT)) beta  += 180.0f*elapsed0;
jp[0] = js.joystickPosition(0);
alpha += jp[0].y*elapsed0*180.0f;
beta  += jp[0].x*elapsed0*180.0f;
 
glm::mat4 RotateX = glm::rotate(glm::mat4(1.0f), alpha, glm::vec3(-1.0f, 0.0f, 0.0f));
glm::mat4 RotateY = glm::rotate(RotateX, beta, glm::vec3(0.0f, 1.0f, 0.0f));
glm::mat4 M = Projection * View * Model * RotateY;
glUniformMatrix4fv(PVM, 1, GL_FALSE, glm::value_ptr(M));
Finally, a call to glDrawElements will render our skybox.

1
glDrawElements(GL_QUADS, sizeof(cube_indices)/sizeof(GLushort), GL_UNSIGNED_SHORT, 0);
If you have any questions, comments, or suggestions, let me know.

Download this project: skybox_20130404correction.tar.bz2
